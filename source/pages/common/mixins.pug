mixin spriteIcon({width, height = width, fill = 'currentColor', label, className=undefined, href, id, opacity})
	-
		const hidden = !label && "true"
		const role = label && "img"
		const titleID = id && `title-${id}`
	svg(class=className role=role width=width height=height viewBox=`0 0 ${width} ${height}` fill=fill aria-hidden=hidden  aria-labelledby=titleID fill-opacity=opacity)
		if label
			title(id=titleID)=label
		use(href=href)

mixin adaptivePic({className, loading = 'lazy', alt = '.', src, ext = 'jpg', scales = ['2x', '3x'], sizes, picClass, medias = ['(min-width: 1000px)', '(min-width: 500px)'], formats = ['avif', 'webp'], suffixes = ['desk', 'tab'] })
	-
		const defaultSize = sizes.at(-1);
		const allFormats = [...formats, ext];

	picture(class=picClass)
		each media, index in medias
			each ext in allFormats
				-
					const set = [`${src}-${suffixes[index]}.${ext} 1x`];
					scales.forEach(scale => set.push(`${src}-${suffixes[index]}@${scale}.${ext} ${scale}`));
					const srcset = set.join(', ');
				source(srcset=srcset media=media, type=`image/${ext}` width=sizes[index][0] height=sizes[index][1] )

		each ext in formats
			-
				const set = [`${src}.${ext} 1x`];
				scales.forEach(scale => set.push(`${src}@${scale}.${ext} ${scale}`));
				const srcset = set.join(', ');
			source(srcset=srcset type=`image/${ext}` )

		- const srcset = scales.map((size) => `${src}@${size}.${ext} ${size}`).join(', ')
		img(class=className src=`${src}.${ext}` srcset=srcset alt=alt loading=loading width=defaultSize[0] height=defaultSize[1] )
